2025-03-02 10:17:09,781 - DEBUG - Este es un mensaje de DEBUG.
2025-03-02 10:17:09,781 - INFO - Este es un mensaje de INFO.
2025-03-02 10:17:09,781 - WARNING - Este es un mensaje de WARNING.
2025-03-02 10:17:09,781 - ERROR - Este es un mensaje de ERROR.
2025-03-02 10:17:09,781 - CRITICAL - Este es un mensaje de CRITICAL.
2025-03-02 10:17:10,426 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'developer', 'content': '## Instructions\n- A partir del siguiente fragmento markdown que describe una clase, genera notas de clase extendidas en Markdown. Incluye una introducción detallada, explicación profunda de cada punto con ejemplos y una conclusión clara.\n- Use markdown to format your answers.'}, {'role': 'user', 'content': '## Clase 1: Eficiencia algorítmica\n\n1. **Justificación del estudio de algoritmos**\n   - Importancia de los algoritmos en la resolución de problemas complejos.\n   - Impacto de los algoritmos en el rendimiento de software.\n   - Casos de estudio históricos de algoritmos críticos.\n   - Comparación con el hardware en términos de eficiencia.\n   - Cómo elegir el algoritmo adecuado para diferentes contextos.\n\n2. **Comparación entre eficiencia de algoritmos**\n   - Métodos para medir eficiencia en el peor, promedio y mejor escenario.\n   - Análisis de tiempo de ejecución y consumo de espacio.\n   - Comparación práctica entre algoritmos comunes (ej. búsqueda, ordenación).\n   - Herramientas y técnicas para comparar algoritmos en la práctica.\n   - Impacto de la eficiencia algorítmica en el escalado de aplicaciones.\n\n3. **Orden de complejidad de los algoritmos y la notación "Big O"**\n   - Conceptos básicos de la notación Big O.\n   - Ejemplos de diferentes órdenes de complejidad (O(1), O(n log n), etc.).\n   - Cómo derivar la complejidad de un algoritmo.\n   - Análisis de casos especiales y límites de la notación Big O.\n   - Introducción a otras notaciones: Big Omega (Ω) y Big Theta (Θ).\n\n'}], 'model': 'gpt-4o'}}
2025-03-02 10:17:10,428 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-02 10:17:10,429 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-03-02 10:17:10,483 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x728c9407acc0>
2025-03-02 10:17:10,483 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x728c94121650> server_hostname='api.openai.com' timeout=5.0
2025-03-02 10:17:10,526 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x728c94079280>
2025-03-02 10:17:10,526 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-02 10:17:10,527 - DEBUG - send_request_headers.complete
2025-03-02 10:17:10,527 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-02 10:17:10,527 - DEBUG - send_request_body.complete
2025-03-02 10:17:10,527 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-02 10:17:14,738 - DEBUG - receive_response_headers.failed exception=KeyboardInterrupt()
2025-03-02 10:17:14,738 - DEBUG - response_closed.started
2025-03-02 10:17:14,738 - DEBUG - response_closed.complete
2025-03-02 10:17:19,868 - DEBUG - Este es un mensaje de DEBUG.
2025-03-02 10:17:19,868 - INFO - Este es un mensaje de INFO.
2025-03-02 10:17:19,868 - WARNING - Este es un mensaje de WARNING.
2025-03-02 10:17:19,868 - ERROR - Este es un mensaje de ERROR.
2025-03-02 10:17:19,868 - CRITICAL - Este es un mensaje de CRITICAL.
2025-03-02 10:17:20,550 - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'developer', 'content': '## Instructions\n- A partir del siguiente fragmento markdown que describe una clase, genera notas de clase extendidas en Markdown. Incluye una introducción detallada, explicación profunda de cada punto con ejemplos y una conclusión clara.\n- Use markdown to format your answers.'}, {'role': 'user', 'content': '## Clase 1: Eficiencia algorítmica\n\n1. **Justificación del estudio de algoritmos**\n   - Importancia de los algoritmos en la resolución de problemas complejos.\n   - Impacto de los algoritmos en el rendimiento de software.\n   - Casos de estudio históricos de algoritmos críticos.\n   - Comparación con el hardware en términos de eficiencia.\n   - Cómo elegir el algoritmo adecuado para diferentes contextos.\n\n2. **Comparación entre eficiencia de algoritmos**\n   - Métodos para medir eficiencia en el peor, promedio y mejor escenario.\n   - Análisis de tiempo de ejecución y consumo de espacio.\n   - Comparación práctica entre algoritmos comunes (ej. búsqueda, ordenación).\n   - Herramientas y técnicas para comparar algoritmos en la práctica.\n   - Impacto de la eficiencia algorítmica en el escalado de aplicaciones.\n\n3. **Orden de complejidad de los algoritmos y la notación "Big O"**\n   - Conceptos básicos de la notación Big O.\n   - Ejemplos de diferentes órdenes de complejidad (O(1), O(n log n), etc.).\n   - Cómo derivar la complejidad de un algoritmo.\n   - Análisis de casos especiales y límites de la notación Big O.\n   - Introducción a otras notaciones: Big Omega (Ω) y Big Theta (Θ).\n\n'}], 'model': 'gpt-4o'}}
2025-03-02 10:17:20,552 - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2025-03-02 10:17:20,552 - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-03-02 10:17:20,688 - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7b33562791f0>
2025-03-02 10:17:20,688 - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x7b33563156d0> server_hostname='api.openai.com' timeout=5.0
2025-03-02 10:17:20,726 - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x7b33562afce0>
2025-03-02 10:17:20,727 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-02 10:17:20,727 - DEBUG - send_request_headers.complete
2025-03-02 10:17:20,727 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-02 10:17:20,728 - DEBUG - send_request_body.complete
2025-03-02 10:17:20,728 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-02 10:17:25,202 - DEBUG - receive_response_headers.failed exception=KeyboardInterrupt()
2025-03-02 10:17:25,202 - DEBUG - response_closed.started
2025-03-02 10:17:25,203 - DEBUG - response_closed.complete
